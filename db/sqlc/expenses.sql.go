// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: expenses.sql

package db

import (
	"context"
	"time"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO "expenses" (
userid, email, amount, tag, description, date
) VALUES (
 $1, $2, $3, $4, $5, $6
)
RETURNING id, userid, email, amount, description, tag, date, created_at, updated_at
`

type CreateExpenseParams struct {
	Userid      int64     `json:"userid"`
	Email       string    `json:"email"`
	Amount      string    `json:"amount"`
	Tag         string    `json:"tag"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.Userid,
		arg.Email,
		arg.Amount,
		arg.Tag,
		arg.Description,
		arg.Date,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Email,
		&i.Amount,
		&i.Description,
		&i.Tag,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpenses = `-- name: DeleteExpenses :exec
DELETE FROM "expenses"
WHERE id = $1
`

func (q *Queries) DeleteExpenses(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpenses, id)
	return err
}

const getExpensesByID = `-- name: GetExpensesByID :one
SELECT id, userid, email, amount, description, tag, date, created_at, updated_at FROM "expenses" 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpensesByID(ctx context.Context, id int64) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpensesByID, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Email,
		&i.Amount,
		&i.Description,
		&i.Tag,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExpensesByUserEmail = `-- name: GetExpensesByUserEmail :one
SELECT id, userid, email, amount, description, tag, date, created_at, updated_at FROM "expenses" 
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetExpensesByUserEmail(ctx context.Context, email string) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpensesByUserEmail, email)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Email,
		&i.Amount,
		&i.Description,
		&i.Tag,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExpensesByUserID = `-- name: GetExpensesByUserID :one
SELECT id, userid, email, amount, description, tag, date, created_at, updated_at FROM "expenses" 
WHERE userid = $1 LIMIT 1
`

func (q *Queries) GetExpensesByUserID(ctx context.Context, userid int64) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpensesByUserID, userid)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Email,
		&i.Amount,
		&i.Description,
		&i.Tag,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, userid, email, amount, description, tag, date, created_at, updated_at FROM "expenses"
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListExpensesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExpenses(ctx context.Context, arg ListExpensesParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.Userid,
			&i.Email,
			&i.Amount,
			&i.Description,
			&i.Tag,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpenses = `-- name: UpdateExpenses :one
UPDATE "expenses"
SET 
amount = $2,
description = $3,
date = $4,
tag = $5,
updated_at = now()
WHERE id = $1
RETURNING id, userid, email, amount, description, tag, date, created_at, updated_at
`

type UpdateExpensesParams struct {
	ID          int64     `json:"id"`
	Amount      string    `json:"amount"`
	Description string    `json:"description"`
	Date        time.Time `json:"date"`
	Tag         string    `json:"tag"`
}

// WHERE email = $1
func (q *Queries) UpdateExpenses(ctx context.Context, arg UpdateExpensesParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpenses,
		arg.ID,
		arg.Amount,
		arg.Description,
		arg.Date,
		arg.Tag,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Email,
		&i.Amount,
		&i.Description,
		&i.Tag,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
